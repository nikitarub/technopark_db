// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PostFull Полная информация о сообщении, включая связанные объекты.
//
// swagger:model PostFull
type PostFull struct {

	// author
	Author *User `json:"author,omitempty"`

	// forum
	Forum *Forum `json:"forum,omitempty"`

	// post
	Post *Post `json:"post,omitempty"`

	// thread
	Thread *Thread `json:"thread,omitempty"`
}

// Validate validates this post full
func (m *PostFull) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThread(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostFull) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {
		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

func (m *PostFull) validateForum(formats strfmt.Registry) error {

	if swag.IsZero(m.Forum) { // not required
		return nil
	}

	if m.Forum != nil {
		if err := m.Forum.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forum")
			}
			return err
		}
	}

	return nil
}

func (m *PostFull) validatePost(formats strfmt.Registry) error {

	if swag.IsZero(m.Post) { // not required
		return nil
	}

	if m.Post != nil {
		if err := m.Post.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("post")
			}
			return err
		}
	}

	return nil
}

func (m *PostFull) validateThread(formats strfmt.Registry) error {

	if swag.IsZero(m.Thread) { // not required
		return nil
	}

	if m.Thread != nil {
		if err := m.Thread.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thread")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostFull) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostFull) UnmarshalBinary(b []byte) error {
	var res PostFull
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
